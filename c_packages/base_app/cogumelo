#!/usr/bin/php -q
<?php
  //
  // CARGO COGUMELO, É PRECISO FACER UNS CANTOS APAÑOS 
  //

  // Project location
  define('SITE_PATH', getcwd().'/c_app/');
  $_SERVER['HTTPS'] = false;
  $_SERVER['HTTP_HOST'] = '';
  $_SERVER['REQUEST_URI'] = 'cogumelo shell script';
  $_SERVER['REMOTE_ADDR'] = "local_shell";

  // cogumelo core Location
  set_include_path('.:'.SITE_PATH);

  require_once("conf/setup.php"); 
  

  require_once(COGUMELO_LOCATION."/c_classes/CogumeloClass.php");
  require_once(SITE_PATH."/Cogumelo.php");

  global $_C;
  $_C =Cogumelo::get();

  //
  //  CARGO MÓDULO DEVEL E O DEVELDBCONTROLLER, QUE É ONDE ESTÁN OS MÉTODOS QUE NOS INTERESAN
  //
  require_once(COGUMELO_LOCATION."/c_modules/devel/devel.php");
  require_once(COGUMELO_LOCATION."/c_modules/devel/classes/controller/DevelDBController.php");

  //
  //  UTILIZO A CLASE COMO FARÍA DENDE UN VIEW NORMAL
  //
  $develdbcontrol = new DevelDBController();
  //var_dump( $develdbcontrol->getTablesSQL() ); // este método, por exemplo, devolvenos todo o  SQL xerado para os VO's do proxecto


   if ($argc>1){ //parameters handler
      switch($argv[1]){
        case 'flush': // delete temporary files
           exec('rm tmp/');
           echo "archivos temporales borrados\n";
        break; 

        case 'createDB': // create database
          $user =  ReadStdin('Enter an user with privileges: ', '');
          // Get the password
          fwrite(STDOUT, "Enter the password: ");
          $passwd = getPassword(true);
          //echo "\nYour password: " . $password . "\n";
          createDB($user, $passwd);
        break; 

        case 'createTables': // create database tables
          createTables();
          echo 'generated db tables\n';
        break;  

        case 'setPermissions': // create database tables
          setPermissions();
        break;    

        case 'bck': // do the backup of the given db
          if ($argc>2){
            $file = $argv[2].'.sql';//name of the backup file
          }
          else{
            $file = false;
          }
          $user =  ReadStdin('Enter an user with privileges: ', '');
          fwrite(STDOUT, "Enter the password: ");
          $passwd = getPassword(true);
          doBackup(DB_NAME, $user, $passwd, $file);
        break;  

        case 'restoreDB': // restore the backup of a given db
          if ($argc>2){
           $bd = $argv[2];
           retoreDB($bd);
          }
          else{
            echo "You must especify the database to restore\n"; 
          }
        break;  

        case 'installDependences': 
            installDependences();
        break;    


        default:
          echo "invalid parameter;try: 
          flush                   to remove temporary files
          createDB                to create a database
          createTables            to generate the tables
          restoreDB               to restore a database
          installDependences      to install all modules dependencies
          setPermissions          to set permissions in app\n";
          exit;     
      }//end switch 
  }//end parameters handler
  else{
    echo "Not enough arguments;try: 
          flush                   to remove temporary files
          createDB                to create a database
          createTables            to generate the tables
          restoreDB               to restore a database
          installDependences      to install all modules dependencies
          setPermissions          to set permissions in app\n";
  }

  function createDB($user, $passwd){
    $develdbcontrol = new DevelDBController($user, $passwd);
    $develdbcontrol->createSchemaDB();
  }

  function createTables(){

    Cogumelo::load('c_controller/ModuleController');
    $moduleControl = new ModuleController(false, true);

    $develdbcontrol = new DevelDBController();
    $develdbcontrol->createTables();
  }

  function setPermissions(){
    exec('mkdir c_app/tmp');
    exec('mkdir c_app/tmp/templates_c');
    exec('mkdir c_app/log');
    exec('mkdir c_app/backups');

    exec('sudo chown -R $USER:www-data httpdocs');
    exec('chmod -R go-rwx,g+rX httpdocs');

    exec('sudo chown -R $USER:www-data c_app');
    exec('chmod -R g-x,o-wx,g+rwX,o+rX c_app');
    exec('chmod -R gu+rwX,o+rX c_app/tmp c_app/log httpdocs/mediaCache');
    exec('sudo chown $USER:$USER c_app/backups');

    echo "permisssions ready!\n";
  }

  function doBackup($BD, $user, $pass, $file){

    if (!$file)
      $file = date('Ymd-Hms').'-'.$BD.'.sql';

    $DIR = BCK;

    exec('mysqldump -u '.$user.' -p'.$pass.' '.$BD.'> '.$DIR.'/'.$file);
    exec('sudo gzip '.$DIR.'/'.$file);
    exec('chmod go-rwx '.$DIR.'/*');
    echo "\nyour db was successfully saved!\n";
  }

  /**
   * Get data from the shell.
   */
  function ReadStdin($prompt, $valid_inputs, $default = '') { 
      while(!isset($input) || (is_array($valid_inputs) && !in_array($input, $valid_inputs)) || ($valid_inputs == 'is_file' && !is_file($input))) { 
          echo $prompt; 
          $input = strtolower(trim(fgets(STDIN))); 
          if(empty($input) && !empty($default)) { 
              $input = $default; 
          } 
      } 
      return $input; 
  } 

  /**
   * Get a password from the shell.
   * This function works on *nix systems only and requires shell_exec and stty.
   *
   * @param  boolean $stars Wether or not to output stars for given characters
   * @return string
   */
  function getPassword($stars = false)
  {
      // Get current style
      $oldStyle = shell_exec('stty -g');

      if ($stars === false) {
          shell_exec('stty -echo');
          $password = rtrim(fgets(STDIN), "\n");
      } else {
          shell_exec('stty -icanon -echo min 1 time 0');

          $password = '';
          while (true) {
              $char = fgetc(STDIN);

              if ($char === "\n") {
                  break;
              } else if (ord($char) === 127) {
                  if (strlen($password) > 0) {
                      fwrite(STDOUT, "\x08 \x08");
                      $password = substr($password, 0, -1);
                  }
              } else {
                  fwrite(STDOUT, "*");
                  $password .= $char;
              }
          }
      }

      // Reset old style
      shell_exec('stty ' . $oldStyle);

      // Return the password
      return $password;
  }

  function installDependences()
  {
    Cogumelo::load('c_controller/ModuleController');
    $moduleControl = new ModuleController(false, true);
    
    $allDependencesBower = array();
    $allDependencesComposer = array();

    global $C_ENABLED_MODULES;
    foreach ( $C_ENABLED_MODULES as $mod ){
      
      $modUrl = ModuleController::getRealFilePath( $mod.".php" , $mod );
      require_once($modUrl);
      eval('class extClass'. $mod .' extends '.$mod. '{}');
      eval('$objMod'.$mod.' = new extClass'.$mod.'();');
      eval('$dependences = $objMod'.$mod.'->dependences;');
      
      //Hacemos una lista de las dependecias de todos los modulos
      foreach ( $dependences as $md ){     
      
        //Diferenciamos entre instaladores
        switch($md['installer']){
          case "composer":
            if(!array_key_exists($md['id'], $allDependencesComposer)){
              $allDependencesComposer[$md['id']] = array($md['params']);
            }
            else{
              $diffAllDepend = array_diff($md['params'] , $allDependencesComposer[$md['id']][0]); 

              if(!empty($diffAllDepend)){
                array_push($allDependencesComposer[$md['id']], array_diff($md['params'] , $allDependencesComposer[$md['id']][0])  );
              }          
            }
          break;
          case "bower":
            if(!array_key_exists($md['id'], $allDependencesBower)){
            $allDependencesBower[$md['id']] = array($md['params']);
            }
            else{
              $diffAllDepend = array_diff($md['params'] , $allDependencesBower[$md['id']][0]); 

              if(!empty($diffAllDepend)){
                array_push($allDependencesBower[$md['id']], array_diff($md['params'] , $allDependencesBower[$md['id']][0])  );
              }          
            }    
          break;
        }
      }   // end foreach             
    } // end foreach 
        
    //error_log( print_r( "ALLBOWER" ,true));
    //error_log( print_r( $allDependencesBower,true));
    //error_log( print_r( "ALLCOMPOSER" ,true));
    //error_log( print_r( $allDependencesComposer,true));

    installDependencesBower($allDependencesBower);
    installDependencesComposer($allDependencesComposer);
    
  }
  
  
  function installDependencesBower($dependences)
  {
    //Instala las dependecias con Bower
    
    foreach( $dependences as $depKey => $dep ){
      foreach( $dep as $params ){                
        if(count($params) > 1){
          $allparam = "";
          foreach( $params as $p ){
            $allparam = $allparam." ".$p;
          } // end foreach
          echo("Exec ... bower install ".$depKey."=".$allparam." --save\n");
          exec('bower install '.$depKey.'='.$allparam.' --save');          
        }
        else{
          echo("Exec ... bower install ".$depKey."=".$params[0]." --save\n");
          exec('bower install '.$depKey.'='.$params[0].' --save');

        }
      }       // end foreach
    }   // end foreach
    
  }

  function installDependencesComposer($dependences)
  {
    
    $finalArrayDep = array("require" => array(), "config" => array("vendor-dir" => "httpdocs/vendorServer"));
    foreach( $dependences as $depKey => $dep ){
      foreach( $dep as $params ){   
        $finalArrayDep['require'][$params[0]] = $params[1];
      }
    }
    $jsonencoded = json_encode($finalArrayDep);
    $fh = fopen("composer.json", 'w');
      fwrite($fh, $jsonencoded);
    fclose($fh);
    echo("Exec ... php composer.phar update\n");          
    exec('php composer.phar update');
    
  }
?>
