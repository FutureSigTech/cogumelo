#!/usr/bin/php -q
<?php
  //
  // CARGO COGUMELO, É PRECISO FACER UNS CANTOS APAÑOS
  //

  // Project location
  define('SITE_PATH', getcwd().'/c_app/');
  $_SERVER['HTTPS'] = false;
  $_SERVER['HTTP_HOST'] = '';
  $_SERVER['REQUEST_URI'] = 'cogumelo shell script';
  $_SERVER['REMOTE_ADDR'] = "local_shell";

  // cogumelo core Location
  set_include_path('.:'.SITE_PATH);

  require_once("conf/setup.php");

  require_once(COGUMELO_LOCATION."/c_classes/CogumeloClass.php");
  require_once(SITE_PATH."/Cogumelo.php");

  global $_C;
  $_C =Cogumelo::get();

  //
  //  CARGO MÓDULO DEVEL E O DEVELDBCONTROLLER, QUE É ONDE ESTÁN OS MÉTODOS QUE NOS INTERESAN
  //
  require_once(COGUMELO_LOCATION."/c_modules/devel/devel.php");
  require_once(COGUMELO_LOCATION."/c_modules/devel/classes/controller/DevelDBController.php");
  require_once(COGUMELO_LOCATION."/c_classes/c_controller/ModuleController.php");
  require_once(COGUMELO_LOCATION."/c_packages/base_app/httpdocs/vendorServer/gettext/gettext/Gettext/autoloader.php");

  //
  //  UTILIZO A CLASE COMO FARÍA DENDE UN VIEW NORMAL
  //
  $develdbcontrol = new DevelDBController();
  //var_dump( $develdbcontrol->getTablesSQL() ); // este método, por exemplo, devolvenos todo o  SQL xerado para os VO's do proxecto


   if ($argc>1){ //parameters handler
      switch($argv[1]){
        case 'setPermissions': // set the files/folders permission
          setPermissions();
        break;

        case 'setPermissionsDevel': // set the files/folders permission
          setPermissionsDevel();
        break;

        case 'createDB': // create database
          $user =  ReadStdin("Enter an user with privileges:\n", '');
          // Get the password
          fwrite(STDOUT, "Enter the password:\n");
          $passwd = getPassword(true);
          createDB($user, $passwd);
          fwrite(STDOUT, "\n--\n");
        break;

        case 'createTables': // create database tables
          createTables();
          echo "\nGenerated db tables\n";
        break;

        case 'bckDB': // do the backup of the db
          if ($argc>2){
            $file = $argv[2].'.sql';//name of the backup file
          }
          else{
            $file = false;
          }
          $user =  ReadStdin('Enter an user with privileges: ', '');
          doBackup(DB_NAME, $user, $file);
        break;

        case 'restoreDB': // restore the backup of a given db
          if ($argc>2){
           $db = $argv[2];
           $user =  ReadStdin('Enter an user with privileges: ', '');
           restoreDB(DB_NAME, $user, $db);
          }
          else{
            echo "You must especify the database to restore\n";
          }
        break;

        case 'installDependences':
            Cogumelo::load('c_controller/DependencesController.php');

            $dependencesControl = new DependencesController();
            $dependencesControl->installDependences();
        break;

        case 'generateTranslations':
           translateWeb();
           generateTranslations();
           echo "The files.po are ready to be edited!\n";
        break;

        case 'compileTranslations':
           translateWeb();
           compileTranslations();
           echo "The files.mo are ready to be used!\n";
        break;

        /* We execute this two actions from web as we need to operate with the apache permissions*/
        case 'flush': // delete temporary files
           exec('wget -q --spider http://cogumelo/cogumelo-server.php?q=flush');
           echo "Temporary files deleted!\n";
        break;

        case 'rotateLogs':
            exec('wget -q --spider cogumelo/cogumelo-server.php?q=rotate_logs');
            echo "The logs have been stored\n";
        break;

        case 'generateClientCaches':
          generateClientCaches();
          echo "All client cachés generated into 'httpdocs/mediacache/' folder \n";
        break;
        default:
          echo "Invalid parameter;try:";
          printOptions();

      }//end switch
  }//end parameters handler
  else{
    echo "Not enough arguments;try:";
    printOptions();
  }


  function printOptions(){
    echo "\n
          flush                         to remove temporary files
          generateClientCaches          to cache all js, css, compiled less and other client files
          setPermissions                to set the files/folders permission
          setPermissionsDevel           to set the files/folders permission
          createDB                      to create a database
          createTables                  to generate the tables
          bckDB                         to do a DB backup (optional arg: filename)
          restoreDB                     to restore a database
          installDependences            to install all modules dependencies
          generateTranslations          to get all the web text into a file.po
          compileTranslations           to compile file.po and get the translations ready
    \n\n";
  }

  function createDB($user, $passwd){
    $develdbcontrol = new DevelDBController($user, $passwd);
    $develdbcontrol->createSchemaDB();
    echo "\nDatase created!\n";
  }

  function createTables(){

    Cogumelo::load('c_controller/ModuleController.php');
    $moduleControl = new ModuleController(false, true);

    $develdbcontrol = new DevelDBController();
    $develdbcontrol->createTables();
  }

  function setPermissions(){
    exec('mkdir -p c_app/tmp/templates_c');
    exec('mkdir -p c_app/log');
    exec('mkdir -p c_app/backups');
    exec('mkdir -p httpdocs/mediaCache');

    exec('sudo chown -R $USER:www-data httpdocs');
    exec('chmod -R go-rwx,g+rX httpdocs');

    exec('sudo chown -R $USER:www-data c_app');
    exec('chmod -R g-x,o-wx,g+rwX,o+rX c_app');
    exec('chmod -R ug+rwX,o+rX c_app/tmp c_app/log httpdocs/mediaCache');

    exec('sudo chown $USER:$USER c_app/backups');
    exec('chmod -R go-rwx c_app/backups');

    echo "Permissions ready!\n";
  }


  function setPermissionsDevel(){
    exec('mkdir -p c_app/tmp/templates_c');
    exec('mkdir -p c_app/log');
    exec('mkdir -p c_app/backups');
    exec('mkdir -p httpdocs/mediaCache');

    exec('sudo chown -R $USER:www-data httpdocs');
    exec('chmod -R u-x,go-wx,ugo+rX httpdocs');

    exec('sudo chown -R $USER:www-data c_app');
    exec('chmod -R go-wx,go+rX c_app');
    exec('chmod -R ug+rwX,o+rX c_app/tmp c_app/log httpdocs/mediaCache httpdocs/test_upload');

    exec('sudo chown $USER:$USER c_app/backups');
    exec('chmod -R go-rwx c_app/backups');

    echo "Permissions ready!\n";
  }

  function doBackup($BD, $user, $file){

    if (!$file)
      $file = date('Ymd-Hms').'-'.$BD.'.sql';

    $DIR = BCK;

    popen('mysqldump -u '.$user.' -p '.$BD.'> '.$DIR.'/'.$file, 'r');
    exec('sudo gzip '.$DIR.'/'.$file);
    exec('chmod go-rwx '.$DIR.'/*');
    echo "\nYour db was successfully saved!\n";
  }

  function restoreDB($BD, $user, $file){

    $DIR = BCK;

    $type = exec('file '.$DIR.$file);
    $position = strpos($type, 'gzip');
    if ($position!=false){
      popen('gunzip -c '.$DIR.$file.' | mysql -u '.$user.' -p '.$BD, 'r');
    }
    else{
      popen('mysql -u '.$user.' -p '.$BD.'< '.$DIR.$file, 'r');
    }
    echo "\nYour db was successfully restored!\n";
  }

  /**
  * Prepare the enviroment to localize the project
  */
  function translateWeb(){
    $textdomain="c_cogumelo";

    $locale= 'es_ES';

    global $c_lang;

    putenv('LANGUAGE='.$locale);
    putenv('LANG='.$locale);
    putenv('LC_ALL='.$locale);
    putenv('LC_MESSAGES='.$locale);

    setlocale(LC_ALL,$locale);
    setlocale(LC_CTYPE,$locale);

    bindtextdomain($textdomain, SITE_PATH.'conf/i18n');
    bind_textdomain_codeset($textdomain, 'UTF-8');
    textdomain($textdomain);
  }

  /**
    * Get all the text to be translated and update or create a file.po if not exists
    */
  function generateTranslations(){
    $textdomain="c_cogumelo";

    $locale= 'es_ES';

    global $c_lang;

    putenv('LANGUAGE='.$locale);
    putenv('LANG='.$locale);
    putenv('LC_ALL='.$locale);
    putenv('LC_MESSAGES='.$locale);

    setlocale(LC_ALL,$locale);
    setlocale(LC_CTYPE,$locale);

    bindtextdomain($textdomain, SITE_PATH.'conf/i18n');
    bind_textdomain_codeset($textdomain, 'UTF-8');
    textdomain($textdomain);


    /**
    * Generate files.po or update them if don't exist already
    */

    $dir_path = SITE_PATH.'conf/i18n/';
    $tmp_dir = SITE_PATH.'tmp/';

    // Get all the php files excluding the translations and the libraries and save them to a temporary file
    $all_php = 'find '.COGUMELO_LOCATION.' -iname "*.php" | grep -v vendorServer | grep -v tmp | grep -v conf > '.$tmp_dir.'xgettext_php.tmp';
    exec($all_php);
    // Get all the tpl files excluding the translations and the libraries and save them to a temporary file
    $all_tpl = 'find '.getcwd().' -iname "*.tpl" | grep -v vendorServer > '.$tmp_dir.'xgettext_tpl.tmp';
    exec($all_tpl);
    // Get all the js files excluding the translations and the libraries and save them to a temporary file
    $all_js = 'find '.getcwd().' -iname "*.js" | grep -v vendor | grep -v jquery-validation > '.$tmp_dir.'xgettext_js.tmp';
    exec($all_js);

    // Check if the .po files exist already
    $existPHP = false;
    $existTPL = false;
    $existJS = false;
    if (is_dir($dir_path)){
      $handle = opendir($dir_path);
      while ($file = readdir($handle)) {
        if ($file=='c_cogumelo_php.po'){
          $existPHP = true;
        }
        if ($file=='c_cogumelo_tpl.po'){
          $existTPL = true;
        }
        if ($file=='c_cogumelo_js.po'){
          $existJS = true;
        }
        if ($existPHP && $existTPL && $existJS)
          break;
      }
    }

    /* PHP */

    //$array_php = file($tmp_dir.'xgettext_php.tmp');
    $dir_modules = COGUMELO_LOCATION.'/c_modules/';
    global $C_ENABLED_MODULES;
    $modules = $C_ENABLED_MODULES;

    foreach ($modules as $k => $dir) {
      $all_module_php = 'find '.$dir_modules.$dir.' -iname "*.php" > '.$tmp_dir.'xgettext_module_php.tmp';
      shell_exec($all_module_php);
      $files_module_php = file($tmp_dir.'xgettext_module_php.tmp');

      foreach ($files_module_php as $k => $value) {
        $parts = explode('/'.$dir.'/',$value);
        $parts[1] = (string) ereg_replace('[[:space:]]+','',$parts[1]); 
        $array_php_module[$k] = ModuleController::getRealFilePath($parts[1], $dir);
      }
    }
    // Agora temos un array de ficheiros susceptibles de ter gettext strings
    $entries = Gettext\Extractors\PhpCode::extract($array_php_module);
    $po = Gettext\Generators\Po::generate($entries);
    $pofile = fopen($dir_path.'c_cogumelo_php.po', 'w') or die('Unable to open file!');
    fwrite($pofile, $po);
    fclose($pofile);

    if ($existPHP){ // Extract new texts and merge in the .po file
      $extractPHP = 'xgettext --from-code=UTF-8 --files-from='.$tmp_dir.'xgettext_php.tmp -o '.$dir_path.$textdomain.'_php.pot';
      exec($extractPHP);
      $mergePHP = 'msgmerge -U '.$dir_path.$textdomain.'_php.po '.$dir_path.$textdomain.'_php.pot';
      exec($mergePHP);
    }
    else{ // Extract all the texts to be translated and create the file
      $extractPHP = 'xgettext --from-code=UTF-8 --files-from='.$tmp_dir.'xgettext_php.tmp -o '.$dir_path.$textdomain.'_php.po';
      exec($extractPHP);
    }

    /* TPL */
    if ($existTPL){ // Extract new texts and merge in the .po file
      $extractTPL = 'xgettext --from-code=UTF-8 --files-from='.$tmp_dir.'xgettext_tpl.tmp -o '.$dir_path.$textdomain.'_tpl.pot';
    }
    else{ // Extract all the texts to be translated and create the file
      //$extractTPL = 'xgettext --from-code=UTF-8 --files-from='.$tmp_dir.'xgettext_tpl.tmp -o '.$dir_path.$textdomain.'_tpl.po'; //tpl
      //shell_exec($extractTPL);
    }

    /*JS */

    // hai q revisalo para facer q mezcle as traduccións novas en lugar de rexeneralas de cada vez
/*  // First we generate an array of files.js
    $all_js = file($tmp_dir.'xgettext_js.tmp');
    foreach ($all_js as $k => $value) {
      $array_js[$k] = dirname($value);
    }

    // We extract the string to be translated from the files in the array and create a .po file
    $entries = Gettext\Extractors\JsCode::extract($array_js);
    $po = Gettext\Generators\Po::generate($entries);
    $pofile = fopen($dir_path.'c_cogumelo_js.po', 'w') or die('Unable to open file!');
    fwrite($pofile, $po);
    fclose($pofile); */  

    /* Delete the modified files remaining */
    if (is_dir($dir_path)){
      $handle = opendir($dir_path);
      while ($file = readdir($handle)) {
        if ($file=='c_cogumelo_php.po~' || $file=='c_cogumelo_tpl.po~' || $file=='c_cogumelo_js.po~' ||
            $file=='c_cogumelo_php.pot'|| $file=='c_cogumelo_tpl.pot' || $file=='c_cogumelo_js.pot'){
              unlink($dir_path.$file);
        }
      }
    }
  }

  /**
  * Compile files.po to get the translations ready to be used
  */
  function compileTranslations(){
    $textdomain="c_cogumelo";
    foreach(explode(',', 'gl,es,en') as $lng) {
      $filepath = SITE_PATH.'conf/i18n/';
      exec('msgfmt -o '.$filepath.$lng.'/LC_MESSAGES/'.$textdomain.'_php.mo '.$filepath.$textdomain.'_php.po');
      exec('msgfmt -o '.$filepath.$lng.'/LC_MESSAGES/'.$textdomain.'_js.mo '.$filepath.$textdomain.'_js.po');
      // exec('msgfmt -o '.$filepath.$textdomain.'_tpl.mo '.$filepath.$textdomain.'_tpl.po');
    }
  }

  /**
   * Get data from the shell.
   */
  function ReadStdin($prompt, $valid_inputs, $default = '') {
      while(!isset($input) || (is_array($valid_inputs) && !in_array($input, $valid_inputs)) || ($valid_inputs == 'is_file' && !is_file($input))) {
          echo $prompt;
          $input = strtolower(trim(fgets(STDIN)));
          if(empty($input) && !empty($default)) {
              $input = $default;
          }
      }
      return $input;
  }

  /**
   * Get a password from the shell.
   * This function works on *nix systems only and requires shell_exec and stty.
   *
   * @param  boolean $stars Wether or not to output stars for given characters
   * @return string
   */
  function getPassword($stars = false)
  {
      // Get current style
      $oldStyle = shell_exec('stty -g');

      if ($stars === false) {
          shell_exec('stty -echo');
          $password = rtrim(fgets(STDIN), "\n");
      } else {
          shell_exec('stty -icanon -echo min 1 time 0');

          $password = '';
          while (true) {
              $char = fgetc(STDIN);

              if ($char === "\n") {
                  break;
              } else if (ord($char) === 127) {
                  if (strlen($password) > 0) {
                      fwrite(STDOUT, "\x08 \x08");
                      $password = substr($password, 0, -1);
                  }
              } else {
                  fwrite(STDOUT, "*");
                  $password .= $char;
              }
          }
      }

      // Reset old style
      shell_exec('stty ' . $oldStyle);

      // Return the password
      return $password;
  }


function generateClientCaches() {

  Cogumelo::load('c_controller/ModuleController.php');

  require_once( ModuleController::getRealFilePath( 'mediaserver.php',  'mediaserver') );

  mediaserver::autoIncludes();
  CacheUtilsController::generateAllCaches();
}

?>
