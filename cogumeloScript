<?php

require_once( COGUMELO_LOCATION."/coreClasses/CogumeloClass.php" );
require_once( SITE_PATH."/Cogumelo.php" );

global $_C;
$_C =Cogumelo::get();

//
//  CARGO MÓDULO DEVEL E O DEVELDBCONTROLLER, QUE É ONDE ESTÁN OS MÉTODOS QUE NOS INTERESAN
//
require_once(ModuleController::getRealFilePath('devel.php', 'devel'));
require_once(ModuleController::getRealFilePath('classes/controller/DevelDBController.php', 'devel'));
require_once(ModuleController::getRealFilePath('classes/controller/CacheUtilsController.php', 'mediaserver'));
Cogumelo::load('coreController/ModuleController.php');

//
//  UTILIZO A CLASE COMO FARÍA DENDE UN VIEW NORMAL
//
//$develdbcontrol = new DevelDBController();
//var_dump( $develdbcontrol->getTablesSQL() ); // este método, por exemplo, devolvenos todo o  SQL xerado para os VO's do proxecto


if( $argc > 1 ) {
  //parameters handler
  switch( $argv[1] ) {
    case 'setPermissions': // set the files/folders permission
      setPermissions();
      break;

    case 'setPermissionsDevel': // set the files/folders permission
      setPermissionsDevel();
      break;

    case 'generateModel':
      // createDB();
      createTables();
      createRelSchemes();
      initModules();
      break;

    case 'createDB': // create database
      doBackup(DB_NAME, DB_USER, DB_PASSWORD, false);
      createDB();
      break;

    case 'createRelSchemes':
      createRelSchemes();
      break;

    case 'createTables': // create database tables
      doBackup(DB_NAME, DB_USER, DB_PASSWORD, false);
      createTables();
      break;

    case 'initModules': // execute ::moduleRc() of all modules
      initModules();
      break;

    case 'bckDB': // do the backup of the db
      if( $argc > 2 ) {
        $file = $argv[2].'.sql';//name of the backup file
      }
      else {
        $file = false;
      }

      doBackup(DB_NAME, DB_USER, DB_PASSWORD, $file);
      break;

    case 'restoreDB': // restore the backup of a given db
      if( $argc > 2 ) {
        $file = $argv[2];//name of the backup file
        restoreDB(DB_NAME, DB_USER, DB_PASSWORD, $file);
      }
      else {
        echo "You must specify the file to restore\n";
      }
      break;

    case 'installDependences':
      Cogumelo::load('coreController/DependencesController.php');
      $dependencesControl = new DependencesController();
      $dependencesControl->installDependences();
      break;

    case 'generateTranslations':
      Cogumelo::load('coreController/i18nScriptController.php');
      $i18nscriptController = new i18nScriptController();
      $i18nscriptController->setEnviroment();
      $i18nscriptController->c_i18n_gettext();
      echo "The files.po are ready to be edited!\n";
    break;

    case 'compileTranslations':
      actionCompileTranslations();
      break;

    case 'jsonTranslations':
      Cogumelo::load('coreController/i18nScriptController.php');
      $i18nscriptController = new i18nScriptController();
      $i18nscriptController->setEnviroment();
      $i18nscriptController->c_i18n_json();
      echo "The files.json are ready to be used!\n";
      break;

    /* We execute this two actions from web as we need to operate with the apache permissions*/
    case 'flush': // delete temporary files
      echo "\n --- setPermissionsDevel:\n";
      setPermissionsDevel();
      echo "\n --- actionFlush:\n";
      actionFlush();
      echo "\n --- actionCompileTranslations:\n";
      actionCompileTranslations();
      echo "\n --- actionGenerateClientCaches:\n";
      if( MEDIASERVER_PRODUCTION_MODE ) {
        actionGenerateClientCaches();
      }
      else {
        echo "\nPasamos porque no estamos en PRODUCTION MODE\n";
      }
      echo "\n --- setPermissionsDevel:\n";
      setPermissionsDevel();
      echo "\n --- DONE\n";
      break;

    case 'rotateLogs':
      actionRotateLogs();
      break;

    case 'generateClientCaches':
      actionGenerateClientCaches();
      break;

    default:
      echo "Invalid parameter;try:";
      printOptions();

  }//end switch
}//end parameters handler
else{
  echo "You have to write an option:";
  printOptions();
}


function actionCompileTranslations() {
  Cogumelo::load('coreController/i18nScriptController.php');
  $i18nscriptController = new i18nScriptController();
  $i18nscriptController->setEnviroment();
  $i18nscriptController->c_i18n_compile();
  /* generate json for js */
  $i18nscriptController->c_i18n_json();
  echo "\nThe files.mo are ready to be used!\n\n";
}


function actionFlush() {
  echo file_get_contents( COGUMELO_ADMINSCRIPT_URL . '?q=flush' );
  echo "\nTemporary files deleted!\n\n";
}


function actionRotateLogs() {
  echo file_get_contents( COGUMELO_ADMINSCRIPT_URL . '?q=rotate_logs' );
  echo "\nRotate Logs done!\n\n";
}


function actionGenerateClientCaches() {
  file_get_contents( COGUMELO_ADMINSCRIPT_URL . '?q=client_caches' );
  echo "\nClient caches generated\n\n";
}


function printOptions(){
  echo "\n
 + Permissions and dependences
    * flush                   Remove temporary files
    * generateClientCaches    Cache all js, css, compiled less and other client files
    * setPermissions          Set the files/folders permission
    * setPermissionsDevel     Set the files/folders permission
    * installDependences      Install all modules dependencies

 + Database
    * createDB                Create a database
    * generateModel           Execute all options below in the same order
      - createTables            Generate the tables
      - createRelSchemes        Generate relationship tmp files
      - initModules             Execute '::moduleRc()' of all modules
    * bckDB                   Do a DB backup (optional arg: filename)
    * restoreDB               Restore a database

 + Internationalization
    * generateTranslations    Get all the web text into a file.po
    * compileTranslations     Compile file.po and get the translations ready
  \n\n";
}

function createDB(){

  echo "\nDatabase configuration\n";

  $user = false;

  $fileConnectionsInfo = SITE_PATH.'conf/default-connections-info.php';
  if( file_exists( $fileConnectionsInfo ) ) {
    include $fileConnectionsInfo;
    if( defined( 'DDBB_PRIV_USER' ) && defined( 'DDBB_PRIV_PASS' ) ) {
      $user = DDBB_PRIV_USER;
      $passwd = DDBB_PRIV_PASS;
    }
  }

  if( !$user ) {
    $user = ReadStdin( "Enter an user with privileges:\n", '' );
    fwrite( STDOUT, "Enter the password:\n" );
    $passwd = getPassword( true );
    fwrite( STDOUT, "\n--\n" );
  }


  $develdbcontrol = new DevelDBController( $user, $passwd );
  $develdbcontrol->createSchemaDB();
  echo "\nDatase created!\n";
}


function createRelSchemes() {

  echo "\nCreating relationship schemes\n";

  global $C_ENABLED_MODULES;

  foreach( $C_ENABLED_MODULES as $moduleName ) {
    require_once( ModuleController::getRealFilePath( $moduleName.'.php' , $moduleName) );
  }

  Cogumelo::load('coreModel/VOUtils.php');

  $dir = APP_TMP_PATH.'/modelRelationship';

  if( !is_dir( $dir ) ) {
    if( !mkdir( $dir, 0777, true ) ) {
      echo 'ERROR: Imposible crear el directorio: '.$dir."\n";
    }
  }

  VOUtils::createModelRelTreeFiles();
}


function createTables(){
  echo "\nCreating DDBB tables, deleting old if exist\n";

  global $C_ENABLED_MODULES;

  foreach( $C_ENABLED_MODULES as $moduleName ) {
    require_once( ModuleController::getRealFilePath( $moduleName.'.php' , $moduleName) );
  }

  /*
  $user =  ReadStdin("Enter an user with privileges:\n", '');
  // Get the password
  fwrite(STDOUT, "Enter the password:\n");
  $passwd = getPassword(true);
  fwrite(STDOUT, "\n--\n");

  $develdbcontrol = new DevelDBController($user, $passwd, DB_NAME);
  */

  $develdbcontrol = new DevelDBController();

  $develdbcontrol->createTables();
  echo "\nGenerated db tables\n";
}

function initModules() {
  global $C_ENABLED_MODULES;

  foreach( $C_ENABLED_MODULES as $moduleName ) {
    require_once( ModuleController::getRealFilePath( $moduleName.'.php' , $moduleName) );

    if( method_exists( $moduleName, 'moduleRc' ) ) {
      echo( "\nINIT: ".$moduleName."::moduleRc()\n" );
      eval( $moduleName.'::moduleRc();' );
    }
  }

  echo "\nModules initialized\n";
}

function makeAppPaths() {
  global $lc, $LANG_AVAILABLE;
  $md = array( APP_TMP_PATH, SMARTY_CONFIG, SMARTY_COMPILE, SMARTY_CACHE,
    MEDIASERVER_TMP_CACHE_PATH, WEB_BASE_PATH.'/'.MEDIASERVER_FINAL_CACHE_PATH, LOGDIR,
    MOD_FORM_FILES_TMP_PATH, MOD_FORM_FILES_APP_PATH, MOD_FILEDATA_CACHE_PATH,
    BCK, I18N, I18N_LOCALE,TPL_TMP );

  foreach( $LANG_AVAILABLE as $lang ) {
    $md[] = I18N_LOCALE.$lang['i18n'].'/LC_MESSAGES';
  }

  foreach( $md as $dir ) {
    if( !is_dir( $dir ) ) {
      if( !mkdir( $dir, 0777, true ) ) {
        echo 'ERROR: Imposible crear el dirirectorio: '.$dir."\n";
      }
    }
  }
}

function setPermissions( $devel = false ) {
  makeAppPaths();

  $extPerms = $devel ? ',ugo+rX' : '';

  exec( 'sudo chown -R $USER:www-data '.WEB_BASE_PATH.' '.APP_BASE_PATH.' '.
    APP_TMP_PATH.' '.SMARTY_CONFIG.' '.SMARTY_COMPILE.' '.SMARTY_CACHE.' '.
    MEDIASERVER_TMP_CACHE_PATH.' '.WEB_BASE_PATH.'/'.MEDIASERVER_FINAL_CACHE_PATH.' '.
    LOGDIR.' '.MOD_FORM_FILES_TMP_PATH.' '.MOD_FORM_FILES_APP_PATH.' '.I18N.' '.I18N_LOCALE.' '.TPL_TMP  );

  exec( 'chmod -R go-rwx,g+rX'.$extPerms.' '.WEB_BASE_PATH );

  exec( 'chmod -R go-rwx,g+rX'.$extPerms.' '.APP_BASE_PATH );

  // Path que necesitan escritura Apache
  exec( 'chmod -R ug+rwX'.$extPerms.' '.APP_TMP_PATH.' '.SMARTY_CONFIG.' '.SMARTY_COMPILE.' '.SMARTY_CACHE.' '.
    MEDIASERVER_TMP_CACHE_PATH.' '.WEB_BASE_PATH.'/'.MEDIASERVER_FINAL_CACHE_PATH.' '.LOGDIR.' '.
    MOD_FORM_FILES_TMP_PATH.' '.MOD_FORM_FILES_APP_PATH.' '.MOD_FILEDATA_CACHE_PATH.' '.
    I18N.' '.I18N_LOCALE.' '.TPL_TMP  );

  // Solo usuario administrador
  exec( 'sudo chown $USER:$USER '.BCK );
  exec( 'chmod -R go-rwx '.BCK );

  echo "Permissions ready!\n";
}

function setPermissionsDevel() {
  setPermissions( true );
}


function doBackup( $db, $user, $passwd, $file ) {
  if( !$file ) {
    $file = date('Ymd-His').'-'.$db.'.sql';
  }

  $dir = BCK;

  popen( 'mysqldump -u ' . $user . ' -p' . $passwd .' '. $db . '> ' . $dir . '/' . $file, 'r' );
  exec( 'gzip ' . $dir . '/' . $file );
  exec( 'chmod go-rwx ' . $dir . '/' . $file . '*' );
  echo "\nYour db was successfully saved!\n";
}

function restoreDB( $db, $user, $passwd, $file ) {
  $dir = BCK;
  $file_parts = explode('.',$dir.$file);

  if ($file_parts[2] == 'gz'){
    popen('gunzip -c '.$dir.$file.' | mysql -u '.$user.' -p'.$passwd.' '.$db, 'r');
  }
  else{
    popen('mysql -u '.$user.' -p'.$passwd.' '.$db.'<' .$dir.$file, 'r');
  }
  echo "\nYour db was successfully restored!\n";
}

/**
 * Get data from the shell.
 */
function ReadStdin( $prompt, $valid_inputs, $default = '' ) {
  while( !isset($input) || ( is_array($valid_inputs) && !in_array($input, $valid_inputs) ) || ( $valid_inputs === 'is_file' && !is_file($input) ) ) {
    echo $prompt;
    $input = strtolower(trim(fgets(STDIN)));
    if( empty($input) && !empty($default) ) {
      $input = $default;
    }
  }
  return $input;
}

/**
 * Get a password from the shell.
 * This function works on *nix systems only and requires shell_exec and stty.
 *
 * @param boolean $stars Wether or not to output stars for given characters
 *
 * @return string
 */
function getPassword( $stars = false ) {
  // Get current style
  $oldStyle = shell_exec('stty -g');

  if ($stars === false) {
    shell_exec('stty -echo');
    $password = rtrim(fgets(STDIN), "\n");
  }
  else {
    shell_exec('stty -icanon -echo min 1 time 0');

    $password = '';

    while( true ) {
      $char = fgetc( STDIN );

      if( $char === "\n" ) {
        break;
      }
      elseif( ord($char) === 127 ) {
        if( strlen($password) > 0 ) {
          fwrite( STDOUT, "\x08 \x08" );
          $password = substr( $password, 0, -1 );
        }
      }
      else {
        fwrite( STDOUT, "*" );
        $password .= $char;
      }
    }
  }

  // Reset old style
  shell_exec('stty ' . $oldStyle);

  // Return the password
  return $password;
}
